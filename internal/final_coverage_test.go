package logger

import (
	"encoding/json"
	"path/filepath"
	"testing"
	"time"
)

/**
 * TestDefaultConfigurations —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func TestSecurityConfigurations(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º DefaultSecurityConfig
	securityConfig := DefaultSecurityConfig()
	if securityConfig == nil {
		t.Fatal("–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil")
	}
	if securityConfig.RateLimitPerSecond <= 0 {
		t.Error("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
	}
	if securityConfig.BanDuration <= 0 {
		t.Error("–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ RateLimiter
	rateLimiter := NewRateLimiter(securityConfig)
	if rateLimiter == nil {
		t.Error("RateLimiter –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")
	}
	defer rateLimiter.Close()
}

/**
 * TestFilterOptions —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É FilterOptions –∏ –µ—ë –º–µ—Ç–æ–¥—ã
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func TestFilterOptions(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
	entries := []LogEntry{
		{Level: DEBUG, Service: "SERVICE1", Message: "debug message", Timestamp: time.Now()},
		{Level: INFO, Service: "SERVICE1", Message: "info message", Timestamp: time.Now()},
		{Level: WARN, Service: "SERVICE2", Message: "warning message", Timestamp: time.Now()},
		{Level: ERROR, Service: "SERVICE2", Message: "error message", Timestamp: time.Now()},
		{Level: PANIC, Service: "SERVICE3", Message: "panic message", Timestamp: time.Now()},
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å–µ—Ä–≤–∏—Å—É
	filter := FilterOptions{Service: "SERVICE1"}
	filtered := filterEntries(entries, filter)
	if len(filtered) != 2 {
		t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è SERVICE1, –ø–æ–ª—É—á–µ–Ω–æ %d", len(filtered))
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —É—Ä–æ–≤–Ω—é
	errorLevel := ERROR
	filter = FilterOptions{Level: &errorLevel}
	filtered = filterEntries(entries, filter)
	if len(filtered) != 2 { // ERROR –∏ PANIC
		t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è ERROR –∏ –≤—ã—à–µ, –ø–æ–ª—É—á–µ–Ω–æ %d", len(filtered))
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
	filter = FilterOptions{Service: "SERVICE2", Level: &errorLevel}
	filtered = filterEntries(entries, filter)
	if len(filtered) != 1 { // –¢–æ–ª—å–∫–æ ERROR –æ—Ç SERVICE2
		t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å 1 –∑–∞–ø–∏—Å—å –¥–ª—è SERVICE2 —Å —É—Ä–æ–≤–Ω–µ–º ERROR –∏ –≤—ã—à–µ, –ø–æ–ª—É—á–µ–Ω–æ %d", len(filtered))
	}
}

/**
 * filterEntries –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π (–∏–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞)
 * @param entries []LogEntry - –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @param filter FilterOptions - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @return []LogEntry - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
 */
func filterEntries(entries []LogEntry, filter FilterOptions) []LogEntry {
	var result []LogEntry
	for _, entry := range entries {
		if filter.Service != "" && entry.Service != filter.Service {
			continue
		}
		if filter.Level != nil && entry.Level < *filter.Level {
			continue
		}
		result = append(result, entry)
	}
	return result
}

/**
 * TestMessageSerialization —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func TestMessageSerialization(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é LogMessage
	msg := LogMessage{

		Level:     INFO,
		Message:   "test message with unicode: —Ç–µ—Å—Ç ÊµãËØï üöÄ",
		Service:   "TEST_SERVICE",
		Timestamp: time.Now(),
		ClientID:  "test-client-123",
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
	data, err := json.Marshal(msg)
	if err != nil {
		t.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
	var deserializedMsg LogMessage
	err = json.Unmarshal(data, &deserializedMsg)
	if err != nil {
		t.Errorf("–æ—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	if deserializedMsg.ClientID != msg.ClientID {
		t.Errorf("ClientID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è %s, –ø–æ–ª—É—á–µ–Ω %s", msg.ClientID, deserializedMsg.ClientID)
	}
	if deserializedMsg.Level != msg.Level {
		t.Errorf("—É—Ä–æ–≤–µ–Ω—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è %v, –ø–æ–ª—É—á–µ–Ω %v", msg.Level, deserializedMsg.Level)
	}
	if deserializedMsg.Message != msg.Message {
		t.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å '%s', –ø–æ–ª—É—á–µ–Ω–æ '%s'", msg.Message, deserializedMsg.Message)
	}
	if deserializedMsg.Service != msg.Service {
		t.Errorf("—Å–µ—Ä–≤–∏—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è '%s', –ø–æ–ª—É—á–µ–Ω '%s'", msg.Service, deserializedMsg.Service)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é LogEntry
	entry := LogEntry{
		Level:     WARN,
		Message:   "warning entry with special chars: !@#$%^&*()",
		Service:   "ENTRY_SERVICE",
		Timestamp: time.Now(),
	}

	entryData, err := json.Marshal(entry)
	if err != nil {
		t.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: %v", err)
	}

	var deserializedEntry LogEntry
	err = json.Unmarshal(entryData, &deserializedEntry)
	if err != nil {
		t.Errorf("–æ—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: %v", err)
	}

	if deserializedEntry.Level != entry.Level {
		t.Errorf("—É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è %v, –ø–æ–ª—É—á–µ–Ω %v", entry.Level, deserializedEntry.Level)
	}
}

/**
 * TestMessageTypes —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func TestConstantsAndDefaults(t *testing.T) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç
	level, err := ParseLevel("INFO")
	if err != nil {
		t.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Ä–æ–≤–Ω—è INFO: %v", err)
	}
	if level != INFO {
		t.Errorf("–æ–∂–∏–¥–∞–ª—Å—è —É—Ä–æ–≤–µ–Ω—å INFO, –ø–æ–ª—É—á–µ–Ω %v", level)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º String() –º–µ—Ç–æ–¥ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
	if DEBUG.String() != "DEBUG" {
		t.Error("DEBUG.String() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 'DEBUG'")
	}
	if INFO.String() != "INFO" {
		t.Error("INFO.String() –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 'INFO'")
	}
}

/**
 * TestLogClientUtilityFunctions —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func TestLogClientUtilityFunctions(t *testing.T) {
	tempDir := t.TempDir()
	logFile := filepath.Join(tempDir, "utility_test.log")

	config := &LoggingConfig{
		LogFile:       logFile,
		SocketPath:    filepath.Join(tempDir, "utility.sock"),
		Level:         "DEBUG",
		FlushInterval: time.Millisecond * 100,
		BufferSize:    50,
		MaxFileSize:   1024,
		MaxFiles:      2,
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º NewLogClient
	client, err := NewLogClient(config)
	if err != nil {
		t.Logf("–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—Å–æ–∫–µ—Ç): %v", err)
		// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
		testStandaloneUtilities(t)
		return
	}

	defer func() { _ = client.Close() }()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º SetLevel
	client.SetLevel(ERROR)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º Ping
	err = client.Ping()
	if err != nil {
		t.Logf("–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ ping (–Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞): %v", err)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	_ = client.Debug("debug message")
	_ = client.Info("info message")
	_ = client.Warn("warning message")
	_ = client.Error("error message")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	_ = client.Debug("debug %s %d", "formatted", 123)
	_ = client.Info("info %s %d", "formatted", 456)
	_ = client.Warn("warning %s %d", "formatted", 789)
	_ = client.Error("error %s %d", "formatted", 999)
}

/**
 * testStandaloneUtilities —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func testStandaloneUtilities(t *testing.T) {
	// –¢–µ—Å—Ç–∏—Ä—É–µ–º ParseLevel —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	testCases := []struct {
		input    string
		expected LogLevel
		hasError bool
	}{
		{"DEBUG", DEBUG, false},
		{"INFO", INFO, false},
		{"WARN", WARN, false},
		{"ERROR", ERROR, false},
		{"PANIC", PANIC, false},
		{"debug", DEBUG, false}, // –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
		{"Info", INFO, false},
		{"WARN", WARN, false},
		{"–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π", DEBUG, true},
		{"", DEBUG, true},
	}

	for _, tc := range testCases {
		result, err := ParseLevel(tc.input)
		if tc.hasError {
			if err == nil {
				t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ '%s'", tc.input)
			}
		} else {
			if err != nil {
				t.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ '%s': %v", tc.input, err)
			}
			if result != tc.expected {
				t.Errorf("–¥–ª—è –≤—Ö–æ–¥–∞ '%s' –æ–∂–∏–¥–∞–ª—Å—è %v, –ø–æ–ª—É—á–µ–Ω %v", tc.input, tc.expected, result)
			}
		}
	}
}

/**
 * TestServiceLoggerMethodsExtended —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ServiceLogger
 * @param t *testing.T - —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
func TestServiceLoggerMethodsExtended(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–∑ mocks_test.go)
	mockClient := &MockLogClient{}
	emptyMockClient := &MockLogClient{}

	serviceLogger := &ServiceLogger{
		client:  mockClient,
		service: "EXTENDED_TEST_SERVICE",
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Ä–æ–≤–Ω–µ–π
	_ = serviceLogger.Debug("extended debug message")
	_ = serviceLogger.Info("extended info message")
	_ = serviceLogger.Warn("extended warning message")
	_ = serviceLogger.Error("extended error message")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	_ = serviceLogger.Debug("debug %s %d %t", "test", 123, true)
	_ = serviceLogger.Info("info %v", []string{"a", "b", "c"})
	_ = serviceLogger.Warn("warning %.2f", 3.14159)
	_ = serviceLogger.Error("error %x", 255)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –≤—ã–∑–æ–≤—ã
	// (–¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ MockLogClient)
	if mockClient == emptyMockClient {
		t.Error("–º–æ–∫-–∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å nil")
	}
}
